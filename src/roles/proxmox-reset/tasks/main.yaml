---
##################################################################
# Destroy VMs
##################################################################
- name: "Check if VM exists"
  ansible.builtin.command: "qm status {{ hostvars[item].proxmox_vm_id }}"
  register: vm_check
  failed_when: false
  changed_when: false
  loop: "{{ groups['vms_all'] }}"
  loop_control:
    label: "{{ hostvars[item].proxmox_vm_name }}"

- name: "Build list of existing VMs"
  ansible.builtin.set_fact:
    existing_vms: >-
      {{
        existing_vms | default([]) +
        [item.item] if item.rc == 0 else existing_vms | default([])
      }}
  loop: "{{ vm_check.results }}"

- name: "Destroy VM if exists"
  ansible.builtin.shell: |
    qm stop {{ hostvars[item].proxmox_vm_id }}
    sleep 5
    qm destroy {{ hostvars[item].proxmox_vm_id }} --purge
  loop: "{{ existing_vms }}"

##################################################################
# Remove VM Template
##################################################################
- name: "Check for locked VMs"
  ansible.builtin.shell: find /etc/pve -type f -name '*.conf' -exec grep -H 'lock:' {} \; | wc -l
  register: vm_lock_check
  changed_when: false

- name: "Unlock VM"
  ansible.builtin.shell: qm unlock {{ cloud_init_template.vm_id }}
  when: vm_lock_check.stdout | int > 0

- name: "Remove VM Template"
  ansible.builtin.shell: "{{ item }}"
  loop:
    - "qm stop {{ cloud_init_template.vm_id }}"
    - "qm destroy {{ cloud_init_template.vm_id }}"
  ignore_errors: yes
  register: vm_template_status
  failed_when: "'unable to find configuration file for VM' in vm_template_status.stderr and 'qm destroy' in item"

##################################################################
# Remove Temporary folder
##################################################################
- name: "Delete temporary folder and image file"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ config_cloud_image_directory }}"
    # - "{{ rocky_linux_cloud_image_file }}"
    # - "{{ rocky_linux_cloud_image_file_sha }}"